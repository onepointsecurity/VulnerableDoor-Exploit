import gatt
from . import disp

# ======================
#    Handle GATT 
# ======================

class TargetDevice(gatt.Device):

    def __init__(self, manager, mac_address):
        gatt.Device.__init__(self, manager=manager, mac_address = mac_address)
        self.vulndoor_characteristic = None
        self.is_ready = False
        self.target_mac = None

    def connect_succeeded(self):
        super().connect_succeeded()
        disp.debug("[%s] Connected" % (self.mac_address))

    def connect_failed(self, error):
        super().connect_failed(error)
        disp.die("[%s] Connection failed: %s" % (self.mac_address, str(error)))

    def disconnect_succeeded(self):
        super().disconnect_succeeded()
        self.is_ready = False
        disp.debug("[%s] Disconnected" % (self.mac_address))

    def characteristic_enable_notification_succeeded(self):
        super.characteristic_enable_notification_succeeded()
        disp.debug("Notification subscription succeeded")

    def characteristic_enable_notification_failed(self):
        super.characteristic_enable_notification_failed()
        disp.die("Notification subscription failed")

    def write_value_succeeded(self):
        super().write_value_succeeded()
        disp.debug("Write characteristic succeeded")

    def write_value_failed(self, error):
        super().write_value_failed(error)
        disp.die("[%s] Write characteristic failed: %s" % (self.mac_address, str(error)))

    def services_resolved(self):
        super().services_resolved()

        disp.debug("[%s] Resolved services" % (self.mac_address))
        for service in self.services:
            disp.debug("[%s]  Service [%s]" % (self.mac_address, service.uuid))
            for characteristic in service.characteristics:
                disp.debug("[%s]    Characteristic [%s]" % (self.mac_address, characteristic.uuid))

        vulndoor_service = next(
            s for s in self.services
            if s.uuid == '0000ffe0-0000-1000-8000-00805f9b34fb')

        vulndoor_characteristic = next(
            c for c in vulndoor_service.characteristics
            if c.uuid == '0000ffe1-0000-1000-8000-00805f9b34fb')

        self.vulndoor_characteristic = vulndoor_characteristic
        
        self.vulndoor_characteristic.enable_notifications()
        self.vulndoor_characteristic.read_value()
        
    def characteristic_value_updated(self, characteristic, value):
        if value.decode("utf-8").find("READY") > -1:
            disp.debug("Received READY from device: Connection succeeded")
            self.is_ready = True
        else:
            disp.debug("Characteristic value updated:", value.decode("utf-8"))
            self.response = value

    def send(self, value):
        if self.vulndoor_characteristic is not None:
            disp.debug("Sending: {}".format(value))
            self.response = None
            self.vulndoor_characteristic.write_value(value)


class BleDeviceScanner(gatt.DeviceManager):
    def run(self):
        disp.debug("Starting Scanner")
        super().run()

    def quit(self):
        disp.debug("Stopping Scanner")
        super().stop()  

    def __init__(self, adapter_name, device_name):
        gatt.DeviceManager.__init__(self, adapter_name=adapter_name)
        self.device_name = device_name
        self.device_mac = None

    def device_discovered(self, device):
        disp.debug("BLE Device Discovered [%s] %s" % (device.mac_address, device.alias()))
        if device.alias().startswith(self.device_name):
            disp.info("Vulnerable device found at address {}".format(device.mac_address))
            self.device_mac = device.mac_address
            self.stop_discovery()

    def get_device_mac(self):
        return self.device_mac


class BleDeviceManager(gatt.DeviceManager):
    def run(self):
        disp.debug("Starting Manager")
        super().run()

    def quit(self):
        disp.debug("Stopping Manager")
        super().stop()  

